module Server where

import Task

data Status = 
  Idle 
  | Running with task: Task
    deriving (Eq, Show)

isIdle : Status -> Bool
isIdle Idle = True
isIdle (Running _) = False

template Server
  with
    machine: Party
  where
    signatory machine

    controller machine can
      nonconsuming RequestJoin: ContractId ClusterJoinRequest
        with clusterHead: Party
        do create ClusterJoinRequest with
            server = this
            clusterHead


template ClusterJoinRequest
  with
    server: Server
    clusterHead: Party
  where
    signatory server.machine

    controller clusterHead can
      JoinRequest_Accept: ContractId Worker
        do 
          create Worker with
            clusterHead
            server
            status = Idle
            observers = []

data WorkerKey = WorkerKey
  with
    serverMachine: Party
    clusterHead: Party
      deriving (Eq, Show)

template Worker
  with
    clusterHead: Party
    server: Server
    status: Status
    observers: [Party]
  where
    signatory clusterHead, server.machine
    key WorkerKey with
        serverMachine = server.machine
        clusterHead
      : WorkerKey
    maintainer key.clusterHead
    observer observers

    controller clusterHead can
      Worker_AssignTask : ContractId Worker
        with
          backtest: ContractId PendingBacktest
        do
          assertMsg "Can accept task only as an idle worker" (isIdle status)

          reassignedBacktest <-
            exercise backtest PendingBacktest_Reassign
              with
                newAssignee = server.machine
          
          task <- exercise reassignedBacktest PendingBacktest_Accept
          create Worker with
            clusterHead
            server
            status = Running task
            observers = [task.user]

      StopTask : ContractId Worker
        do
          create Worker with
            clusterHead
            server
            status = Idle
            observers = []